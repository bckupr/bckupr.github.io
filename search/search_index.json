{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Bckupr  <p> The all in one container backup and restore solution. </p>"},{"location":"#quick_start","title":"Quick Start","text":"<p>Using Bckupr you can automate local backups, pushing to offsite storage and data rentention with simple commands to also automate restoring your data. Bckupr will read container labels to tell which volumes should be backed up before shutting down relavent containers and taking backups to ensure all data is flushed to disk avoiding corrupt backuprs. Run Bckupr using the following docker commands to get started...</p> docker rundocker-compose.yml <p>Use the following docker run command to start bckupr: <pre><code>$ docker run --name bckupr -d \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    sbnarra/bckupr cron \\\n    --backup-host-dir /backups \\\n    --schedule \"0 0 * * *\"\n</code></pre> Create new ad-hoc backup: <pre><code>$ docker exec bckupr backup --backup-id adhoc\n</code></pre> To then restore from the adhoc backup: <pre><code>$ docker exec bckupr restore --backup-id adhoc\n</code></pre></p> <p>Use the following YAML to run bckupr: <pre><code>version: \"3\"\nservices:\n  bckupr:\n    image: sbnarra/bckupr\n    environment:\n      BACKUP_HOST_DIR: /backups\n      SCHEDULE: \"0 0 * * *\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre> Create new ad-hoc backup: <pre><code>$ docker compose bckupr exec backup --backup-id adhoc\n</code></pre> To then restore from the adhoc backup: <pre><code>$ docker compose bckupr exec restore --backup-id adhoc\n</code></pre></p> <p>By default bckupr runs in dry run mode, to disable use arg <code>--dry-run false</code> or env <code>DRY_RUN=false</code> once testing is complete.</p>"},{"location":"container_templates/","title":"Container Templates","text":"<p>Bckupr itself doesn't perform any backups or restores, it insteads runs containers based on templates to do the job for it.</p> <p>By default there's 3 containers pre-configured for created/restoring compressed tar backups, <code>file-check</code>, <code>backup</code> and <code>restore</code>; this follows https://docs.docker.com/desktop/backup-and-restore/.</p> <p>Then there's 2 unconfigured templates for handling offsite backups:</p> <ul> <li><code>offsite-push</code>: triggered after the <code>backup</code> container completes</li> <li><code>offsite-pull</code>: triggers if <code>file-check</code> fails during the restore process</li> </ul> <p>Templates accept 3 options; image, cmd and env.</p> <ul> <li><code>--&lt;name&gt;-image</code>/<code>&lt;NAME&gt;_IMAGE</code>: e.g <code>--backup-image</code>/<code>BACKUP_IMAGE</code> - sets containers image</li> <li><code>&lt;name&gt;-cmd</code>: e.g <code>--backup-cmd</code>/<code>BACKUP_CMD</code> - sets command to execute within container</li> <li><code>&lt;name&gt;-env</code>: e.g <code>--backup-env</code>/<code>BACKUP_ENV</code> - sets env vars to passthrough</li> </ul>"},{"location":"container_templates/#template_replacements","title":"Template Replacements","text":"<ul> <li><code>{name}</code></li> <li><code>{backup_id}</code></li> </ul>"},{"location":"container_templates/#pre-configured_templates","title":"Pre-Configured Templates","text":""},{"location":"container_templates/#backup","title":"backup","text":"<p>Responsible for creating a local backup.</p> <ul> <li><code>--backup-image</code>/<code>BACKUP_IMAGE</code> = <code>busybox</code></li> <li><code>--backup-cmd</code>/<code>BACKUP_CMD</code> = <code>tar czvf {name}.tar.gz -C /backup/{backup_id} /data</code></li> <li><code>--backup-env</code>/<code>BACKUP_ENV</code> = N/A</li> </ul>"},{"location":"container_templates/#file-check","title":"file-check","text":"<p>Responsible for checking <code>backup</code> created the expected backup file and the backup exists before <code>restore</code> executes.</p> <ul> <li><code>--file-check-image</code>/<code>BACKUP_IMAGE</code> = <code>busybox</code></li> <li><code>--file-check-cmd</code>/<code>BACKUP_CMD</code> = <code>ls /backup/{backup_id}/{name}.tar.gz</code></li> <li><code>--file-check-env</code>/<code>BACKUP_ENV</code> = N/A</li> </ul>"},{"location":"container_templates/#restore","title":"restore","text":"<p>Responsible for restoring data from a local backup.</p> <ul> <li><code>--restore-image</code>/<code>RESTORE_IMAGE</code> = <code>busybox</code></li> <li><code>--restore-cmd</code>/<code>RESTORE_CMD</code> = <code>tar xzvf /backup/{backup_id}/{name}.tar.gz --strip 1 -C /data</code></li> <li><code>--restore-env</code>/<code>RESTORE_ENV</code> = N/A</li> </ul>"},{"location":"container_templates/#un-configured_templatess","title":"Un-Configured Templatess","text":""},{"location":"container_templates/#offsite-push","title":"offsite-push","text":""},{"location":"container_templates/#offsite-pull","title":"offsite-pull","text":""},{"location":"metrics/","title":"Metrics","text":"<p>...coming one day...</p> <ul> <li>Prometheus</li> <li>Influxdb</li> </ul>"},{"location":"options/","title":"Options","text":"<p>...provide complete list of options...</p> Cli Env Default Description <code>--dry-run</code> <code>DRY_RUN</code> <code>true</code> Dry run doesn't execute containers <code>--other</code> <code>OTHER</code> <code>unset</code> Some other option"},{"location":"overview/","title":"Overview","text":"<p>The bckupr container is a wrapper to the bckupr cli, by default the image executes the <code>cron</code> command to run bckupr as a cron server.</p> <p>By default bckupr runs with <code>--dry-run=true</code>/<code>DRY_RUN=true</code>, make sure to test and review with dry run enabled before disabling and performing real backups/restores.</p> <p>The following sections provide an overview of how bckupr works.</p>"},{"location":"overview/#how_backupsrestores_work","title":"How Backups/Restores Work?","text":"<p>Bckupr is responsible for managing data backups and restores by running customisable containers which mounts the <code>/backup</code>(backup archive) and <code>/data</code>(volume/mount data).</p> <p>The default backup process follows these simple steps...</p> <ol> <li>Reading container labels to determine which volumes/mounts need backing up</li> <li>Stopping containers with read/write access to backup volumes/mounts or labelled with <code>bckupr.stop=true</code><ul> <li>this can be configured using the <code>--stop-modes</code>/<code>STOP_MODES</code> options.</li> </ul> </li> <li>Executing docker containers per volume/mount responsible for performing the backup<ul> <li>this can be configured using <code>backup</code> container templates.</li> </ul> </li> <li>Finally restarting previously stopped containers.</li> </ol> <p>Bckupr restores follows the same process as the backups but stopping containers with both read/write and read-only access and using <code>restore</code> container templates.</p>"},{"location":"overview/#global_options","title":"Global Options","text":"<ul> <li><code>--dry-run</code>/<code>DRY_RUN</code> - default=<code>true</code><ul> <li>set to <code>false</code> to disable dry runs and perform real backups/restores</li> </ul> </li> <li><code>--debug</code>/<code>DEBUG</code> - default=<code>false</code><ul> <li>set to <code>true</code> to enable debug logs</li> </ul> </li> <li><code>--dev</code>/<code>DEV</code> - default=<code>false</code><ul> <li>set to <code>true</code> to enrich logs with dev data (useful when submitting issues)</li> </ul> </li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#doing_now","title":"Doing Now","text":"<ul> <li>Complete Documentation<ul> <li>home badges... ci/cd - docker pulls/scans</li> </ul> </li> <li>scratch image, add 'mgr' component as entrypoint<ul> <li>name, will house: cron, api, ui? mgr  web</li> </ul> </li> <li>image names bckupr/cli AND bckupr/cron AND bckupr/web ...</li> <li>Filesystem backup/restore (half implemented)</li> </ul>"},{"location":"roadmap/#will_do_soon","title":"Will Do Soon","text":"<ul> <li>Backups need type prepend, full and partial (when filtering applied)<ul> <li><code>YYYY-MM-DD_hh-mm-&lt;type&gt;</code> -full-cron -full-manual (ah not too sure tbh)</li> </ul> </li> <li> <p>support incremental backups</p> </li> <li> <p>opencontainer annotations added to image</p> <ul> <li>https://github.com/opencontainers/image-spec/blob/main/annotations.md</li> </ul> </li> <li>hide email? too much name in there</li> </ul> <p>--- can publish at this point ---</p> <ul> <li> <p>Metrics - </p> <ul> <li>after API to have long running process to serve metrics from?</li> <li>prometheus - prometheus/client_python</li> </ul> </li> <li> <p>CI/CD - Github actions </p> <ul> <li>monitor base image, auto rebuild whenever there's a new base image</li> </ul> </li> </ul>"},{"location":"roadmap/#will_do_eventually","title":"Will Do Eventually","text":"<ul> <li>API<ul> <li>POST /backups - trigger new backup</li> <li>GET /backups - list backups</li> <li>GET /backups/{id} - download backup</li> <li>DELETE /backups/{id} - delete local backup</li> </ul> </li> </ul>"},{"location":"roadmap/#might_do_eventually","title":"Might Do Eventually","text":"<ul> <li>Simple GUI - <ul> <li>1 page with list of backups</li> <li>buttons to download/delete. <ul> <li>toggles/selecting all</li> </ul> </li> <li>header button trigger new backups, </li> </ul> </li> </ul>"},{"location":"roadmap/#could_do_someday","title":"Could Do Someday","text":"<ul> <li>Rewrite the whole thing in GO? ... why? Go seems like a better lang for the use-case of writing docker apps/tools, need to research a bit more to decide<ul> <li>API side of things looks good</li> <li>UI? guess it offers a web server so can stick to HTML/JS</li> </ul> </li> </ul> <p>GO will support running on the scratch image, python binary needs same image as builder image...might be better to do this now before writing any more code</p> <p>https://medium.com/geekculture/how-to-structure-your-project-in-golang-the-backend-developers-guide-31be05c6fdd9</p> <p>golang-standards/project-layout</p>"},{"location":"stop_modes/","title":"Stop Modes","text":"<p>Stop modes control how bckupr chooses which containers needs shutting down, multiple can be applied at once. There's 4 stop modes:</p> <ul> <li><code>all</code> - stop all running containers</li> <li><code>labelled</code> - stop all containers labelled with <code>bckupr.stop</code></li> <li><code>writers</code> - stop all containers with backup/restore volumes mounted with read/write access</li> <li><code>attached</code> - stop all containers with backup/restore volumes mounted</li> </ul> <p>By default backups use <code>labelled</code> and <code>writers</code> stop modes. Restores use <code>labelled</code> and <code>attached</code> stop modes.</p>"}]}